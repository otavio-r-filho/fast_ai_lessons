input_data = mx.symbol.Variable(name = "data")
# Convultional layer 1
conv_1_1 = mx.symbol.Convolution(data = input_data, kernel = c(64,64), stride = c(4,4), num_filter = 32, name = "conv_1_1")
conv_1_1 = mx.symbol.Activation(data = conv_1_1, act_type = "relu", name = "act_relu_1_1")
conv_1_2 = mx.symbol.Convolution(data = conv_1_1, kernel = c(64,64), stride = c(1,1), num_filter = 32, name = "conv_1_2")
conv_1_2 = mx.symbol.Activation(data = conv_1_2, act_type = "relu", name = "act_relu_1_2")
pool_1 = mx.symbol.Pooling(data = conv_1_2, kernel = c(4,4), stride = c(2,2), pool_type = "max", name = "pool_1")
# Convultional layer 2
conv_2_1 = mx.symbol.Convolution(data = pool_1, kernel = c(32,32), stride = c(4,4), num_filter = 128, name = "conv_1_1")
conv_2_1 = mx.symbol.Activation(data = conv_2_1, act_type = "relu", name = "act_relu_2_1")
conv_2_2 = mx.symbol.Convolution(data = conv_2_1, kernel = c(32,32), stride = c(1,1), num_filter = 128, name = "conv_2_2")
conv_2_2 = mx.symbol.Activation(data = conv_2_2, act_type = "relu", name = "act_relu_2_2")
pool_2 = mx.symbol.Pooling(data = conv_2_2, kernel = c(4,4), stride = c(2,2), pool_type = "max", name = "pool_2")
# Convultional layer 3
conv_3_1 = mx.symbol.Convolution(data = pool_2, kernel = c(16,16), stride = c(2,2), num_filter = 256, name = "conv_3_1")
conv_3_1 = mx.symbol.Activation(data = conv_3_1, act_type = "relu", name = "act_relu_3_1")
conv_3_2 = mx.symbol.Convolution(data = conv_3_1, kernel = c(16,16), stride = c(1,1), num_filter = 256, name = "conv_3_2")
conv_3_2 = mx.symbol.Activation(data = conv_3_2, act_type = "relu", name = "act_relu_3_2")
pool_3 = mx.symbol.Pooling(data = conv_3_2, kernel = c(3,3), stride = c(2,2), pool_type = "max", name = "pool_3")
# Convultional layer 4
conv_4_1 = mx.symbol.Convolution(data = pool_3, kernel = c(4,4), stride = c(2,2), num_filter = 512, name = "conv_4_1")
conv_4_1 = mx.symbol.Activation(data = conv_4_1, act_type = "relu", name = "act_relu_4_1")
conv_4_2 = mx.symbol.Convolution(data = conv_4_1, kernel = c(4,4), stride = c(1,1), num_filter = 512, name = "conv_4_2")
conv_4_2 = mx.symbol.Activation(data = conv_4_2, act_type = "relu", name = "act_relu_4_2")
flat_pool = mx.symbol.Pooling(data = conv_4_2, pool_type = "avg", global_pool = T, name = "avg_global_pool")
fc_1 = mx.symbol.FullyConnected(data = flat_pool, num_hidden = 2048, name = "fc_1")
fc_1 = mx.symbol.Activation(data = fc_1, act_type = "relu", name = "fc_1_relu")
fc_1 = mx.symbol.Dropout(data = fc_1, p = 0.5, name = "dout_1")
fc_2 = mx.symbol.FullyConnected(data = fc_1, num_hidden = 128, name = "fc_2")
fc_2 = mx.symbol.Activation(data = fc_2, act_type = "relu", name = "fc_2_relu")
fc_2 = mx.symbol.Dropout(data = fc_2, p = 0.35, name = "dout_2")
logits = mx.symbol.FullyConnected(data = fc_2, num_hidden = num_classes, name = "logits")
softmax = mx.symbol.SoftmaxOutput(data = logits, name = "softmax")
return(softmax)
}
symbol = get_symbol(nrow(labels_dict))
graph.viz(symbol)
rm(symbol)
rm(get_symbol)
View(labels)
View(labels)
View(labels)
labels <- labels[1:2]
write_delim(labels, "labels.txt", sep = " ", col_names = F)
write_delim(labels, "labels.txt", delim = " ", col_names = F)
nlabels = ncol(labels)
nlabels = nrow(labels)
nlabels
train_nlabels = 0.7 * nlabels
val_nlabels = 0.15 * nlabels
test_nlabels = 0.15 * nlabels
round(train_nlabels, digits = 0)
train_nlabels = round(train_nlabels, digits = 0)
help("sample")
help(sample)
?sample
sample?
q
tain_lbl <- sample(labels, train_nlabels, replace = T)
tain_lbl <- sample(labels, size = train_nlabels, replace = T)
View(train_lbl)
View(tain_lbl)
rm(tain_lbl)
sample_frac(labels, size=2)
sample_frac(labels, size=0.1)
train_labels <- sample_frac(labels, size=0.1, replace = T)
View(train_labels)
rest_labels <- labels - train_labels
rest_labels <- labels[-train_labels]
rest_labels <- labels[ ! labels$image_file %in% train_labels$image_file ]
rest_labels <- labels[ ! labels$image_file %in% train_labels$image_file, ]
rest_labels <- labels[ ! labels %in% train_labels, ]
rest_labels <- labels[ ! labels[1,] %in% train_labels[1,], ]
labels %in% train_labels
labels[,1] %in% train_labels[,1]
labels$image_file %in% train_labels$image_file
labels[,1]
rest_labels <- filter(labels[,1] %in% train_labels[,1])
rest_labels <- filter(labels, 1 == train_labels[,1])
rest_labels <- filter(labels, names(labels)[1] == train_labels$names(labels)[1])
rest_labels <- filter(labels, names(labels)[1] == train_labels$(names(labels)[1]))
rest_labels <- filter(labels, names(labels)[1] %in% train_labels$(names(labels)[1]))
rest_labels <- filter(labels, names(labels)[1] %in% train_labels[,1])
rest_labels <- filter(labels, [,1] %in% train_labels[,1])
rest_labels <- filter(labels, labels[,1] %in% train_labels[,1])
rest_labels <- filter(labels, !labels[,1] %in% train_labels[,1])
labels[,1] %in% train_labels[,1]
rest_labels <- filter(labels, $1 %in% train_labels$1)
labels$1
labelsp[,1]
labels[1,]
labels[,1]
labels[!(labels[,1] %IN% train_labels[,1])]
labels[!(labels[,1] %in% train_labels[,1])]
labels[!(labels$image_file %in% train_labels$image_file)]
labels[!labels$image_file %in% train_labels$image_file]
labels[!labels$image_file %in% train_labels$image_file, ]
labels[!labels[,1] %in% train_labels[,1], ]
labels[!(labels[,1] %in% train_labels[,1]), ]
labels[-(labels[,1] %in% train_labels[,1]), ]
labels[-(labels[,1] == train_labels[,1]), ]
names(labels)
names(labels)[1]
labels %>% filter(name(labels)[1] %in% train_labels[,1])
labels %>% filter(names(labels)[1] %in% train_labels[,1])
labels %>% filter(names(labels)[1] %in% train_labels$names(trian_labels)[1])
labels %>% filter(names(labels)[1] %in% train_labels$names(train_labels)[1])
labels %>% filter(names(labels)[1] %in% train_labels$(names(train_labels)[1]))
labels %>% filter(names(labels)[1] == train_labels[,1])
labels %>% filter(names(labels)[1] %in% train_labels[,1])
labels %>% filter(.[[1]] %in% train_labels[[1]])
labels %>% filter(! .[[1]] %in% train_labels[[1]])
# Loaging labels
labels <- read_table2("../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
View(labels)
split_dataset <- function(ds_list, train_split, val_split, test_split) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- samples_frac(rem_list, val_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% val_list[[1]])
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
}
data = split_dataset(labels, 0.7, 0.15, 0.15)
split_dataset <- function(ds_list, train_split, val_split, test_split) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- sample_frac(rem_list, val_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% val_list[[1]])
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
}
data = split_dataset(labels, 0.7, 0.15, 0.15)
data$train
data$val
data$test
split_dataset <- function(ds_list, train_split, val_split, test_split) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- sample_frac(rem_list, val_split)
rem_list <- rem_list %>% filter(! .[[1]] %in% val_list[[1]])
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
}
data = split_dataset(labels, 0.7, 0.15, 0.15)
data$train
data$val
data$test
split_dataset <- function(ds_list, train_split, val_split, test_split) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- sample_n(rem_list, round(val_split * nrow(ds_list), digit = 0))
rem_list <- rem_list %>% filter(! .[[1]] %in% val_list[[1]])
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
}
data = split_dataset(labels, 0.7, 0.15, 0.15)
data$train
data$val
data$test
split_dataset <- function(ds_list, train_split, val_split, ) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- sample_n(rem_list, round(val_split * nrow(ds_list), digit = 0))
rem_list <- rem_list %>% filter(! .[[1]] %in% val_list[[1]])
if (trian_split + val_split < 1.0) {
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
} else {
ret = list("train" = train_list, "val" = val_list)
}
}
split_dataset <- function(ds_list, train_split, val_split, ) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- sample_n(rem_list, round(val_split * nrow(ds_list), digit = 0))
rem_list <- rem_list %>% filter(! .[[1]] %in% val_list[[1]])
if(trian_split + val_split < 1.0) {
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
} else {
ret = list("train" = train_list, "val" = val_list)
}
}
split_dataset <- function(ds_list, train_split, val_split, ) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- sample_n(rem_list, round(val_split * nrow(ds_list), digit = 0))
rem_list <- rem_list %>% filter(! .[[1]] %in% val_list[[1]])
if(train_split + val_split < 1.0) {
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
} else {
ret = list("train" = train_list, "val" = val_list)
}
}
split_dataset <- function(ds_list, train_split, val_split, ) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- sample_n(rem_list, round(val_split * nrow(ds_list), digit = 0))
rem_list <- rem_list %>% filter(! .[[1]] %in% val_list[[1]])
if(train_split + val_split < 1.0) {
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
} else {
ret = list("train" = train_list, "val" = val_list)
}
}
split_dataset <- function(ds_list, train_split, val_split, ) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- sample_n(rem_list, round(val_split * nrow(ds_list), digit = 0))
rem_list <- rem_list %>% filter(! .[[1]] %in% val_list[[1]])
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
}
split_dataset <- function(ds_list, train_split, val_split) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- sample_n(rem_list, round(val_split * nrow(ds_list), digit = 0))
rem_list <- rem_list %>% filter(! .[[1]] %in% val_list[[1]])
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
}
split_dataset <- function(ds_list, train_split, val_split) {
# Add sum to 1 assertion
train_list <- sample_frac(ds_list, train_split)
rem_list <- ds_list %>% filter(! .[[1]] %in% train_list[[1]])
val_list <- sample_n(rem_list, round(val_split * nrow(ds_list), digit = 0))
rem_list <- rem_list %>% filter(! .[[1]] %in% val_list[[1]])
if(train_split + val_split < 1.0){
ret = list("train" = train_list, "val" = val_list, "test" = rem_list)
} else {
ret = list("train" = train_list, "val" = val_list)
}
}
data = split_dataset(labels, 0.7, 0.15, 0.15)
data = split_dataset(labels, 0.7, 0.15)
data$train
data$val
data$test
data = split_dataset(labels, 0.7, 0.3)
data$train
data$val
data$test
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
library(mxnet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(readr)
# Loaging labels
labels <- read_table2("../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
View(labels)
# Preparing the labels dictionary
labels_dict <- labels %>%
mutate(image_file = str_replace(image_file, "_([0-9]{1,})", "")) %>%
mutate(image_file = str_replace_all(image_file, "_", " ")) %>%
mutate(species = if_else(species == 1, "cat", "dog")) %>%
mutate(breed_id = NULL) %>%
unique(.)
names(labels_dict) <- c("breed", "class", "species")
View(labels_dict)
labels <- labels[1:2]
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
View(input_list)
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
grapth.viz(symbol)
graph.viz(symbol)
write_delim(input_list$train, "train_list", delim = "\t", col_names = F)
write_delim(input_list$val, "val_list", delim = "\t", col_names = F)
write_delim(input_list$test, "test_list", delim = "\t", col_names = F)
im2rec("train_list", "../datasets/image_classification/oxford-iiit-pet/images", train.rec)
im2rec("train_list", "../datasets/image_classification/oxford-iiit-pet/images", "train.rec")
im2rec("train_list", "/home/oribeiro/Workspace/AI/fast_ai/datasets/image_classification/oxford-iiit-pet/images", "train.rec")
write_delim(input_list$train$image_file, "train_list", delim = "\t", col_names = F)
write_delim(input_list$train[[1]], "train_list", delim = "\t", col_names = F)
write_delim(input_list$train, "train_list", delim = "\t", col_names = F)
View(labels)
# Loaging labels
labels <- read_table2("../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
View(labels)
# Preparing the labels dictionary
labels_dict <- labels %>%
mutate(image_file = str_replace(image_file, "_([0-9]{1,})", "")) %>%
mutate(image_file = str_replace_all(image_file, "_", " ")) %>%
mutate(species = if_else(species == 1, "cat", "dog")) %>%
mutate(breed_id = NULL) %>%
unique(.)
names(labels_dict) <- c("breed", "class", "species")
View(labels_dict)
labels <- labels[c("class_id", "image_file")]
View(labels)
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
write_delim(input_list$train, "train_list", delim = " \t ", col_names = F)
write_delim(input_list$val, "val_list", delim = " \t ", col_names = F)
View(input_list$train)
label <- labels %>% mutate(index = row.names(labels))
View(labels)
labels <- labels %>% mutate(index = row.names(labels))
View(labels)
library(mxnet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(readr)
# Loaging labels
labels <- read_table2("../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
# Preparing the labels dictionary
labels_dict <- labels %>%
mutate(image_file = str_replace(image_file, "_([0-9]{1,})", "")) %>%
mutate(image_file = str_replace_all(image_file, "_", " ")) %>%
mutate(species = if_else(species == 1, "cat", "dog")) %>%
mutate(breed_id = NULL) %>%
unique(.)
names(labels_dict) <- c("breed", "class", "species")
View(labels_dict)
labels <- labels %>% mutate(index = row.names(labels))
labels <- labels[c("index", "class_id", "image_file")]
View(labels)
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
write_delim(input_list$train, "train_list", delim = " \t ", col_names = F)
write_delim(input_list$val, "val_list", delim = " \t ", col_names = F)
write_delim(input_list$test, "test_list", delim = " \t ", col_names = F)
View(input_list$train)
symbol <- get_symbol(nrow(labels_dict))
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
im2rec(image_lst = "train_list","../datasets/image_classification/oxford-iiit-pet/images", "train.bin", )
im2rec(image_lst = "train_list",
root = "../datasets/image_classification/oxford-iiit-pet/images",
output_rec = "train.bin",
new_size = 256)
im2rec(image_lst = "train_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "train.bin",
new_size = 256)
# Loaging labels
labels <- read_table2("../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
# Preparing the labels dictionary
labels_dict <- labels %>%
mutate(image_file = str_replace(image_file, "_([0-9]{1,})", "")) %>%
mutate(image_file = str_replace_all(image_file, "_", " ")) %>%
mutate(species = if_else(species == 1, "cat", "dog")) %>%
mutate(breed_id = NULL) %>%
unique(.)
names(labels_dict) <- c("breed", "class", "species")
labels <- labels %>%
mutate(index = row.names(labels)) %>%
mutate(image_file = image_file + ".jpg")
labels <- labels %>%
mutate(index = row.names(labels)) %>%
mutate(image_file = image_file + ".jpg")
View(labels)
labels <- labels %>%
mutate(index = row.names(labels)) %>%
mutate(image_file = str_c(image_file, ".jpg", sep = ""))
labels <- labels[c("index", "class_id", "image_file")]
View(labels)
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
write_delim(input_list$train, "train_list", delim = " \t ", col_names = F)
write_delim(input_list$val, "val_list", delim = " \t ", col_names = F)
write_delim(input_list$test, "test_list", delim = " \t ", col_names = F)
View(input_list$train)
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
im2rec(image_lst = "train_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "train.bin",
new_size = 256)
im2rec(image_lst = "val_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "val.bin",
new_size = 256)
im2rec(image_lst = "test_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "test.bin",
new_size = 256)
im2rec(image_lst = "train_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "train.bin")
im2rec(image_lst = "val_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "val.bin")
im2rec(image_lst = "test_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "test.bin")
train <- mx.io.ImageRecordIter(path.imgrec = "train.bin",
batch.size = 32,
data.shape = c(256, 256, 3))
val <- mx.io.ImageRecordIter(path.imgrec = "val.bin",
batch.size = 32,
data.shape = c(256, 256, 3))
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
im2rec(image_lst = "test_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "test.bin",
new_size = c(256,256))
# Loaging labels
labels <- read_table2("../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
# Preparing the labels dictionary
labels_dict <- labels %>%
mutate(image_file = str_replace(image_file, "_([0-9]{1,})", "")) %>%
mutate(image_file = str_replace_all(image_file, "_", " ")) %>%
mutate(species = if_else(species == 1, "cat", "dog")) %>%
mutate(breed_id = NULL) %>%
unique(.)
names(labels_dict) <- c("breed", "class", "species")
labels <- labels %>%
mutate(index = row.names(labels)) %>%
mutate(image_file = str_c(image_file, ".jpg", sep = ""))
labels <- labels[c("index", "class_id", "image_file")]
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
write_delim(input_list$train, "train_list", delim = " \t ", col_names = F)
write_delim(input_list$val, "val_list", delim = " \t ", col_names = F)
write_delim(input_list$test, "test_list", delim = " \t ", col_names = F)
View(input_list$train)
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
im2rec(image_lst = "train_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "train.bin")
im2rec(image_lst = "val_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "val.bin")
im2rec(image_lst = "test_list",
root = "../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = "test.bin")
train <- mx.io.ImageRecordIter(path.imgrec = "train.bin",
batch.size = 32,
data.shape = c(256, 256, 3))
val <- mx.io.ImageRecordIter(path.imgrec = "val.bin",
batch.size = 32,
data.shape = c(256, 256, 3))
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
