install.packages(c("ggplot2", "dplyr", "tidyr", "purrr", "matlib", "plotly"))
installed.packages()
install.packages("tidyr")
install.packages("plotly")
install.packages("openssl")
install.packages("openssl")
install.packages("httr")
install.packages("tidyr")
install.packages(tidyr)
install.packages("plotly")
install.packages(c('tensorflow', 'keras', 'ggplot2', 'dplyr', 'tidyr', 'matlib'))
install.packages('plotly')
install.packages('matlib')
library(tensorflow)
use_condaenv('dlpy36')
library(tensorflow)
use_condaenv('dlpy36')
tfconst = tf$constant('dhfasjhdlfkaj')
sess = tf$Session()
sess$run(tfconst)
setwd('/home/otavio/Workspace/AI/fast_ai_lessons/lesson_1/R_implementation')
clear
cls
library(mxnet)
help("im2rec")
library(keras)
use_condaenv("dlpy36")
get_keras_model <- function(input_shape, num_classes) {
inputs <- keras::layer_input(shape = input_shape)
# Conv block 1
conv_1_1 <- keras::layer_conv_2d(inputs, filters = 32, kernel_size = c(32,32), strides = c(1,1), activation = "relu", padding = "same", name = "conv_1_1")
conv_1_2 <- keras::layer_conv_2d(conv_1_1, filters = 32, kernel_size = c(32,32), strides = c(1,1), activation = "relu", padding = "same", name = "conv_1_2")
pool_1 <- keras::layer_max_pooling_2d(conv_1_2, pool_size = c(2,2), strides = c(2,2), padding = "valid", name = "pool_1")
# Conv block 2
conv_2_1 <- keras::layer_conv_2d(pool_1, filters = 128, kernel_size = c(16,16), strides = c(1,1), activation = "relu", name = "conv_2_1")
conv_2_2 <- keras::layer_conv_2d(conv_2_1, filters = 128, kernel_size = c(16,16), strides = c(1,1), activation = "relu", name = "conv_2_2")
pool_2 <- keras::layer_max_pooling_2d(conv_2_2, pool_size = c(2,2), strides = c(2,2), name = "pool_2")
# Conv block 3
conv_3_1 <- keras::layer_conv_2d(pool_2, filters = 256, kernel_size = c(4,4), strides = c(1,1), activation = "relu", name = "conv_3_1")
conv_3_2 <- keras::layer_conv_2d(conv_3_1, filters = 256, kernel_size = c(4,4), strides = c(1,1), activation = "relu", name = "conv_3_2")
pool_3 <- keras::layer_max_pooling_2d(conv_3_2, pool_size = c(2,2), strides = c(2,2), name = "pool_3")
flat_pool <- keras::layer_global_average_pooling_2d(pool_3, name = "avg_global_pool")
#fc_1 <- keras::layer_dense(flat_pool, units = 2048, activation = "relu", name = "fc_1")
#do_1 <- keras::layer_dropout(fc_1, rate = 0.5, name = "do_1")
#fc_2 <- keras::layer_dense(do_1, units = 128, activation = "relu", name = "fc_2")
#do_2 <- keras::layer_dropout(fc_2, rate = 0.35, name = "do_2")
#logits <- keras::layer_dense(do_2, units = num_classes, activation = None, name = "logits")
#output <- keras::layer_activation(logits, activation = "softmax", name = "output")
output <- flat_pool
model <- keras_model(inputs = inputs, outputs = output)
return(model)
}
model <- get_keras_model(input_shape = c(256,256,3), num_classes = 37)
summary(model)
help(keras::layer_conv_2d)
help(layer_conv_2d)
get_keras_model <- function(input_shape, num_classes) {
inputs <- keras::layer_input(shape = input_shape)
# Conv block 1
conv_1_1 <- keras::layer_conv_2d(inputs, filters = 32, kernel_size = c(32,32), strides = c(1,1), activation = "relu", padding = "same", name = "conv_1_1")
conv_1_2 <- keras::layer_conv_2d(conv_1_1, filters = 32, kernel_size = c(32,32), strides = c(1,1), activation = "relu", padding = "same", name = "conv_1_2")
pool_1 <- keras::layer_max_pooling_2d(conv_1_2, pool_size = c(2,2), strides = c(2,2), name = "pool_1")
# Conv block 2
conv_2_1 <- keras::layer_conv_2d(pool_1, filters = 128, kernel_size = c(16,16), strides = c(1,1), activation = "relu", padding = "same", name = "conv_2_1")
conv_2_2 <- keras::layer_conv_2d(conv_2_1, filters = 128, kernel_size = c(16,16), strides = c(1,1), activation = "relu", padding = "same", name = "conv_2_2")
pool_2 <- keras::layer_max_pooling_2d(conv_2_2, pool_size = c(2,2), strides = c(2,2), name = "pool_2")
help(layer_conv_2d)
# Conv block 3
conv_3_1 <- keras::layer_conv_2d(pool_2, filters = 256, kernel_size = c(4,4), strides = c(1,1), activation = "relu", padding = "same", name = "conv_3_1")
conv_3_2 <- keras::layer_conv_2d(conv_3_1, filters = 256, kernel_size = c(4,4), strides = c(1,1), activation = "relu", padding = "same", name = "conv_3_2")
pool_3 <- keras::layer_max_pooling_2d(conv_3_2, pool_size = c(2,2), strides = c(2,2), name = "pool_3")
flat_pool <- keras::layer_global_average_pooling_2d(pool_3, name = "avg_global_pool")
#fc_1 <- keras::layer_dense(flat_pool, units = 2048, activation = "relu", name = "fc_1")
#do_1 <- keras::layer_dropout(fc_1, rate = 0.5, name = "do_1")
#fc_2 <- keras::layer_dense(do_1, units = 128, activation = "relu", name = "fc_2")
#do_2 <- keras::layer_dropout(fc_2, rate = 0.35, name = "do_2")
#logits <- keras::layer_dense(do_2, units = num_classes, activation = None, name = "logits")
#output <- keras::layer_activation(logits, activation = "softmax", name = "output")
output <- flat_pool
model <- keras_model(inputs = inputs, outputs = output)
return(model)
}
model <- get_keras_model(input_shape = c(256,256,3), num_classes = 37)
summary(model)
get_keras_model <- function(input_shape, num_classes) {
inputs <- keras::layer_input(shape = input_shape)
# Conv block 1
conv_1_1 <- keras::layer_conv_2d(inputs, filters = 32, kernel_size = c(32,32), strides = c(1,1), activation = "relu", padding = "same", name = "conv_1_1")
conv_1_2 <- keras::layer_conv_2d(conv_1_1, filters = 32, kernel_size = c(32,32), strides = c(1,1), activation = "relu", padding = "same", name = "conv_1_2")
pool_1 <- keras::layer_max_pooling_2d(conv_1_2, pool_size = c(2,2), strides = c(2,2), name = "pool_1")
# Conv block 2
conv_2_1 <- keras::layer_conv_2d(pool_1, filters = 128, kernel_size = c(16,16), strides = c(1,1), activation = "relu", padding = "same", name = "conv_2_1")
conv_2_2 <- keras::layer_conv_2d(conv_2_1, filters = 128, kernel_size = c(16,16), strides = c(1,1), activation = "relu", padding = "same", name = "conv_2_2")
pool_2 <- keras::layer_max_pooling_2d(conv_2_2, pool_size = c(2,2), strides = c(2,2), name = "pool_2")
help(layer_conv_2d)
# Conv block 3
conv_3_1 <- keras::layer_conv_2d(pool_2, filters = 256, kernel_size = c(4,4), strides = c(1,1), activation = "relu", padding = "same", name = "conv_3_1")
conv_3_2 <- keras::layer_conv_2d(conv_3_1, filters = 256, kernel_size = c(4,4), strides = c(1,1), activation = "relu", padding = "same", name = "conv_3_2")
pool_3 <- keras::layer_max_pooling_2d(conv_3_2, pool_size = c(2,2), strides = c(2,2), name = "pool_3")
flat_pool <- keras::layer_global_average_pooling_2d(pool_3, name = "avg_global_pool")
fc_1 <- keras::layer_dense(flat_pool, units = 512, activation = "relu", name = "fc_1")
do_1 <- keras::layer_dropout(fc_1, rate = 0.5, name = "do_1")
fc_2 <- keras::layer_dense(do_1, units = 64, activation = "relu", name = "fc_2")
do_2 <- keras::layer_dropout(fc_2, rate = 0.15, name = "do_2")
logits <- keras::layer_dense(do_2, units = num_classes, activation = None, name = "logits")
output <- keras::layer_activation(logits, activation = "softmax", name = "output")
model <- keras_model(inputs = inputs, outputs = output)
return(model)
}
model <- get_keras_model(input_shape = c(256,256,3), num_classes = 37)
get_keras_model <- function(input_shape, num_classes) {
inputs <- keras::layer_input(shape = input_shape)
# Conv block 1
conv_1_1 <- keras::layer_conv_2d(inputs, filters = 32, kernel_size = c(32,32), strides = c(1,1), activation = "relu", padding = "same", name = "conv_1_1")
conv_1_2 <- keras::layer_conv_2d(conv_1_1, filters = 32, kernel_size = c(32,32), strides = c(1,1), activation = "relu", padding = "same", name = "conv_1_2")
pool_1 <- keras::layer_max_pooling_2d(conv_1_2, pool_size = c(2,2), strides = c(2,2), name = "pool_1")
# Conv block 2
conv_2_1 <- keras::layer_conv_2d(pool_1, filters = 128, kernel_size = c(16,16), strides = c(1,1), activation = "relu", padding = "same", name = "conv_2_1")
conv_2_2 <- keras::layer_conv_2d(conv_2_1, filters = 128, kernel_size = c(16,16), strides = c(1,1), activation = "relu", padding = "same", name = "conv_2_2")
pool_2 <- keras::layer_max_pooling_2d(conv_2_2, pool_size = c(2,2), strides = c(2,2), name = "pool_2")
help(layer_conv_2d)
# Conv block 3
conv_3_1 <- keras::layer_conv_2d(pool_2, filters = 256, kernel_size = c(4,4), strides = c(1,1), activation = "relu", padding = "same", name = "conv_3_1")
conv_3_2 <- keras::layer_conv_2d(conv_3_1, filters = 256, kernel_size = c(4,4), strides = c(1,1), activation = "relu", padding = "same", name = "conv_3_2")
pool_3 <- keras::layer_max_pooling_2d(conv_3_2, pool_size = c(2,2), strides = c(2,2), name = "pool_3")
flat_pool <- keras::layer_global_average_pooling_2d(pool_3, name = "avg_global_pool")
fc_1 <- keras::layer_dense(flat_pool, units = 512, activation = "relu", name = "fc_1")
do_1 <- keras::layer_dropout(fc_1, rate = 0.5, name = "do_1")
fc_2 <- keras::layer_dense(do_1, units = 64, activation = "relu", name = "fc_2")
do_2 <- keras::layer_dropout(fc_2, rate = 0.15, name = "do_2")
logits <- keras::layer_dense(do_2, units = num_classes, name = "logits")
output <- keras::layer_activation(logits, activation = "softmax", name = "output")
model <- keras_model(inputs = inputs, outputs = output)
return(model)
}
model <- get_keras_model(input_shape = c(256,256,3), num_classes = 37)
summary(model)
library(mxnet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(readr)
# Loaging labels
labels <- read_table2("../../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
# Preparing the labels dictionary
labels_dict <- labels %>%
mutate(image_file = str_replace(image_file, "_([0-9]{1,})", "")) %>%
mutate(image_file = str_replace_all(image_file, "_", " ")) %>%
mutate(species = if_else(species == 1, "cat", "dog")) %>%
mutate(breed_id = NULL) %>%
unique(.)
names(labels_dict) <- c("breed", "class", "species")
#View(labels_dict)
labels <- labels %>%
mutate(index = row.names(labels)) %>%
mutate(image_file = str_c(image_file, ".jpg", sep = ""))
labels <- labels[c("index", "class_id", "image_file")]
#View(labels)
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
write_delim(input_list$train, "train_list", delim = " \t ", col_names = F)
write_delim(input_list$val, "val_list", delim = " \t ", col_names = F)
write_delim(input_list$test, "test_list", delim = " \t ", col_names = F)
View(input_list$train)
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
library(mxnet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(readr)
# Loaging labels
labels <- read_table2("../../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
# Loaging labels
labels <- read_table2("../../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
# Preparing the labels dictionary
labels_dict <- labels %>%
mutate(image_file = str_replace(image_file, "_([0-9]{1,})", "")) %>%
mutate(image_file = str_replace_all(image_file, "_", " ")) %>%
mutate(species = if_else(species == 1, "cat", "dog")) %>%
mutate(breed_id = NULL) %>%
unique(.)
names(labels_dict) <- c("breed", "class", "species")
labels <- labels %>%
mutate(index = row.names(labels)) %>%
mutate(image_file = str_c(image_file, ".jpg", sep = ""))
labels <- labels[c("index", "class_id", "image_file")]
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
write_delim(input_list$train, "train_list", delim = " \t ", col_names = F)
write_delim(input_list$val, "val_list", delim = " \t ", col_names = F)
write_delim(input_list$test, "test_list", delim = " \t ", col_names = F)
View(input_list$train)
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
train_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/train.bin"
val_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/val.bin"
test_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/val.bin"
im2rec(image_lst = "train_list",
root = "../../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = train_bin,
new_size = 256)
im2rec(image_lst = "train_list",
root = "../../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = train_bin,
new_size = 256)
im2rec(image_lst = "val_list",
root = "../../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = val_bin,
new_size = 256)
im2rec(image_lst = "test_list",
root = "../../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = test_bin,
new_size = 256)
train <- mx.io.ImageRecordIter(path.imgrec = train_bin,
batch.size = 16,
data.shape = c(3, 256, 256),
scale = 1/255)
val <- mx.io.ImageRecordIter(path.imgrec = val_bin,
batch.size = 16,
data.shape = c(3, 256, 256),
scale = 1/255)
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
train <- mx.io.ImageRecordIter(path.imgrec = train_bin,
batch.size = 16,
data.shape = c(256, 256, 3),
scale = 1/255)
val <- mx.io.ImageRecordIter(path.imgrec = val_bin,
batch.size = 16,
data.shape = c(256, 256, 3),
scale = 1/255)
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
graph.viz(symbol)
mx.symbol.infer.shape(symbol)
mx.symbol.infer.shape(symbol = symbol)
train <- mx.io.ImageRecordIter(path.imgrec = train_bin,
batch.size = 16,
data.shape = c(256, 256, 3),
scale = 1/255)
val <- mx.io.ImageRecordIter(path.imgrec = val_bin,
batch.size = 16,
data.shape = c(256, 256, 3),
scale = 1/255)
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
source("cnn_symbol.R")
symbol <- get_symbol(nrow(labels_dict))
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
help("mx.symbol.Convolution")
help("mx.io.ImageRecordIter")
train <- mx.io.ImageRecordIter(path.imgrec = train_bin,
batch.size = 16,
data.shape = c(3, 256, 256),
scale = 1/255)
val <- mx.io.ImageRecordIter(path.imgrec = val_bin,
batch.size = 16,
data.shape = c(3, 256, 256),
scale = 1/255)
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
train <- mx.io.ImageRecordIter(path.imgrec = train_bin,
batch.size = 8,
data.shape = c(256, 256, 3),
scale = 1/255)
val <- mx.io.ImageRecordIter(path.imgrec = val_bin,
batch.size = 16,
data.shape = c(256, 256, 3),
scale = 1/255)
val <- mx.io.ImageRecordIter(path.imgrec = val_bin,
batch.size = 8,
data.shape = c(256, 256, 3),
scale = 1/255)
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
