library(ggplot2)
saida_total <- read.csv("C:/Users/otavi/Downloads/saida_total.csv")
View(saida_total)
ggplot(subset(saida_total, versao == 'assincrono_v6'), aes(x = processadores, y = tempo_total)) + geom_point()
library(dplyr)
saida_total <- read.csv("C:/Users/otavi/Downloads/saida_total.csv")
View(saida_total)
library(ggplot2)
library(dplyr)
library(tidyr)
saida_total <- saida_total %>% mutate(.,17047/tempo_total)
rm(saida_total)
saida_total <- read.csv("C:/Users/otavi/Downloads/saida_total.csv")
View(saida_total)
saida_total <- saida_total %>% mutate(.,speedup = 17047 / tempo_total)
saida_suma <- summarise(saida_total)
View(saida_suma)
rm(saida_suma)
ggplot(data = subset(saida_total, abordagen == 'assincrono'), aes(x = processadores, y = speedup)) + geom_point() + facet_wrap(., ncol = 2)
ggplot(data = subset(saida_total, abordagem == 'assincrono'), aes(x = processadores, y = speedup)) + geom_point() + facet_wrap(., ncol = 2)
ggplot(data = subset(saida_total, abordagem == 'assincrono'), aes(x = processadores, y = speedup)) + geom_point() + facet_wrap(~versao, ncol = 2)
ggplot(data = subset(saida_total, abordagem == 'assincrono'), aes(x = processadores, y = speedup)) + geom_point() + geom_smooth() + facet_wrap(~versao, ncol = 2)
ggplot(data = subset(saida_total, abordagem == 'assincrono'), aes(x = processadores, y = speedup)) + xlim(0,60) + ylim(0, 60) + geom_point() + geom_smooth() + facet_wrap(~versao, ncol = 2)
saida_nest <- saida_total %>% group_by(versao, processadores) %>% nest()
View(saida_nest)
saida_nest <- saida_nest %>% unnest()
saida_nest$abordagem <- NULL
saida_nest <- saida_total %>% group_by(versao, processadores) %>% nest() %>% mutate(.,med_dist = predict(loess(speedup ~ processadores))) %>% unest()
saida_nest <- saida_total %>% group_by(versao, processadores) %>% nest() %>% mutate(.,med_dist = predict(loess(.,speedup ~ processadores))) %>% unest()
install.packages("lubridate")
library(lubridate)
saida_total <- read.csv("C:/Users/otavi/Downloads/saida_total.csv")
View(saida_total)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
execucoes <- saida_total %>% filter(., !is.na(tempo_total)) %>% mutate(., speedup = 17047 / tempo_total)
View(execucoes)
execucoes <- execucoes %>% nest(-versao) %>% mutate(., fit = map(data, ~predict(loess(speedup ~ processadores, .)))) %>% unnest() %>% mutate(., fit_dist = abs(fit - speedup)) %>% mutate(., log_dist = logb(fit_dist, 50))
ggplot(execucoes %>% filter(., grepl("assincrono_", versao)), aes(x =  processadores, y = speedup, color = log_dist)) + geom_point() + geom_smooth(color = alpha('darkblue', 0.5), fill = alpha('darkgray', 1.0), alpha = 0.4) + facet_wrap(~versao, ncol = 2) + scale_color_continuous(low = 'darkgreen', high = 'red', name = "discrepancia")
ggplot(execucoes %>% filter(., grepl("assincrono_", versao)), aes(x =  processadores, y = speedup, color = log_dist)) + geom_point() + geom_smooth(color = alpha('darkblue', 0.5), fill = alpha('darkgray', 1.0), alpha = 0.4) + facet_wrap(~versao, ncol = 2) + scale_color_gradient(low = 'darkgreen', high = 'red', name = "discrepancia")
execucoes <- execucoes %>% mutate(., log_dist =  logb(fit_dist, 2))
ggplot(execucoes %>% filter(., grepl("assincrono_", versao)), aes(x =  processadores, y = speedup, color = log_dist)) + geom_point() + geom_smooth(color = alpha('darkblue', 0.5), fill = alpha('darkgray', 1.0), alpha = 0.4) + facet_wrap(~versao, ncol = 2) + scale_color_gradient(low = 'darkgreen', high = 'red', name = "discrepancia")
execucoes <- execucoes %>% mutate(., log_dist =  logb(fit_dist, 100))
ggplot(execucoes %>% filter(., grepl("assincrono_", versao)), aes(x =  processadores, y = speedup, color = log_dist)) + geom_point() + geom_smooth(color = alpha('darkblue', 0.5), fill = alpha('darkgray', 1.0), alpha = 0.4) + facet_wrap(~versao, ncol = 2) + scale_color_gradient(low = 'darkgreen', high = 'red', name = "discrepancia")
execucoes <- execucoes %>% mutate(., log_dist =  exp(fit_dist))
ggplot(execucoes %>% filter(., grepl("assincrono_", versao)), aes(x =  processadores, y = speedup, color = log_dist)) + geom_point() + geom_smooth(color = alpha('darkblue', 0.5), fill = alpha('darkgray', 1.0), alpha = 0.4) + facet_wrap(~versao, ncol = 2) + scale_color_gradient(low = 'darkgreen', high = 'red', name = "discrepancia")
execucoes <- execucoes %>% mutate(., log_dist =  fit_dist ** 5)
execucoes <- execucoes %>% mutate(., log_dist =  logb(fit_dist+1,20))
ggplot(execucoes %>% filter(., grepl("assincrono_", versao)), aes(x =  processadores, y = speedup, color = log_dist)) + geom_point() + geom_smooth(color = alpha('darkblue', 0.5), fill = alpha('darkgray', 1.0), alpha = 0.4) + facet_wrap(~versao, ncol = 2) + scale_color_gradient(low = 'darkgreen', high = 'red', name = "discrepancia")
execucoes <- execucoes %>% mutate(., log_dist =  logb(fit_dist+1,50))
ggplot(execucoes %>% filter(., grepl("assincrono_", versao)), aes(x =  processadores, y = speedup, color = log_dist)) + geom_point() + geom_smooth(color = alpha('darkblue', 0.5), fill = alpha('darkgray', 1.0), alpha = 0.4) + facet_wrap(~versao, ncol = 2) + scale_color_gradient(low = 'darkgreen', high = 'red', name = "discrepancia")
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
A <- data.frame(
measures = c(0:10)
)
f0 <- function(x){ return (x - 4)}
f1 <- function(x){ return(-x+6)}
A <- A %>% mutate()
A
A <- A %>% mutate(pertinence = rep(0, time = 11))
A
A <- A %>% filter(measures >= 4, measures <= 5) %>% mutate(pertinence = f0(measures))
A
A <- data.frame(
measures <- c(0:10),
pertinence <- rep(0, time = 11)
)
A
A %>% filter(measures >= 4, measures <= 5) %>% mutate(pertinence = f0(measures))
A %>% filter(measures >= 4, measures <= 5) %>% mutate(pertinence = f0(measures))
B <- A %>% filter(measures >= 4, measures <= 5) %>% mutate(pertinence = f0(measures))
A
A <- data.frame(
measures = c(0:10),
)
A <- data.frame(
measures = c(0:10),
)
A <- data.frame(
measures = c(0:10),
pertinence = rep(0, times = 11)
)
A
CLEAR
A %>% filter(measures >= 4, measures <= 5) %>% mutate(pertinence = f0(measures))
library(ggplot)
library(ggplot2)
library(dplyr)
library(tidyr)
library(purrr)
A <- data.frame(
measures = c(0:10),
pertinence = rep(0,11)
)
A
f0 <- funcntion(x){return(x-4)}
f0 <- function(x){return(x-4)}
f1 <- function(x){return(-x+6)}
A <- A %>% mutate(pertinence = if_else(measures >= 4 & measures <= 5, f0(measures), pertinence)) %>% mutate(pertinence = if_else(measures > 5 & measures <= 6, f1(measures), pertinence))
A
A %>% filter(measures > 2, measures < 8) %>% ggplot(aes(x = measures, y = pertinence)) %>% geom_point(size = 1.3, color = "red") + geom_segment(aes(xend = measures, yend = 0))
A %>% filter(measures > 2, measures < 8) %>% ggplot(aes(x = measures, y = pertinence)) + geom_point(size = 1.3, color = "red") + geom_segment(aes(xend = measures, yend = 0))
A %>% filter(measures > 2, measures < 8) %>% ggplot(aes(x = measures, y = pertinence)) + geom_point(size = 2, color = "red") + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed")
A %>% filter(measures > 2, measures < 8) %>% ggplot(aes(x = measures, y = pertinence)) + geom_point(size = 3, color = "red") + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed")
A %>% filter(measures > 2, measures < 8) %>% ggplot(aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed") + geom_point(size = 2, color = "red")
A %>% filter(measures > 2, measures < 8) %>% ggplot(aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed") + geom_point(size = 2, color = "red")
A %>% filter(measures > 2, measures < 8) %>% ggplot(aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed") + geom_point(size = 2, color = "red")
A_exe5 <- data.frame(
measures = c(0:10),
)
A_exe5 <- data.frame(
measures = c(0:10),
pertinence = rep(0, time = 11)
)
A
A_exe5
f0 <- function(x){return(x-4)}
f1 <- function(x){return(-x+7)}
A_exe5
A_exe5 <- A_exe5 %>%
mutate(pertinence = if_else(measures >= 4 & measures <= 5, f0(measures), pertinence)) %>%
mutate(pertinence = if_else(measures > 5 & measures <= 6, 1, pertinence)) %>%
mutate(pertinence = if_else(measures > 6 & measures <= 7, f1(measures), pertinence)) %>%
A_exe5 <- A_exe5 %>%
mutate(pertinence = if_else(measures >= 4 & measures <= 5, f0(measures), pertinence)) %>%
mutate(pertinence = if_else(measures > 5 & measures <= 6, 1, pertinence)) %>%
mutate(pertinence = if_else(measures > 6 & measures <= 7, f1(measures), pertinence))
A_exe5
A_exe5 <- A_exe5 %>% mutate(pertinence = if_else(measures >= 4 & measures <= 5, f0(measures), pertinence)) %>% mutate(pertinence = if_else(measures > 5 & measures <= 6, 1, pertinence)) %>% mutate(pertinence = if_else(measures > 6 & measures <= 7, f1(measures), pertinence))
A_exe5
A_exe5 %>% filter(measures > 2, measures < 9) %>% ggplot(aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0)) + geom_point(size= 2, color = "red")
A_exe5 %>% filter(measures > 2, measures < 9) %>% ggplot(aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed") + geom_point(size= 3, color = "red")
A <- c(0, 0, 0, 0, 0.4, 0.6, 0.8, 1, 0.8, 0.6)
A
A <- data.frame(
measures = c(1:10),
pertinence = A
)
A
B <- data.frame(
measures = c(1:10),
pertinence = c(0, 0, 0, 0, 0.4, 0.5, 0.6, 1, 0.6, 0.4)
)
B
C <- data.frame(
measures = c(1:10),
pertinence = c(0, 1, 0.2, 0.3, 0.4, 0.5, 0.6, 1, 0.5, 0)
)
C
ggplot(A, aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed") + geom_point(size = 3, color = "red")
ggplot(A, aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed") + geom_line(size = 1.3, color = "red") + geom_point(size = 3, color = "red")
ggplot(B, aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed") + geom_line(size = 1.3, color = "red") + geom_point(size = 3, color = "red")
ggplot(C, aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed") + geom_line(size = 1.3, color = "red") + geom_point(size = 3, color = "red")
rm(*)
rm(A,B,C,A_exe5)
rm(f0,f1)
c(0, 0, 0, 0, 0.4, 0.6, 0.8, 1, 0.8, 0.6)
length(c(0, 0, 0, 0, 0.4, 0.6, 0.8, 1, 0.8, 0.6))
A <- data.frame(
measures = c(1:10)<
)
A <- data.frame(
measures = c(1:10),
pertinence = c(0, 0, 0, 0, 0.4, 0.6, 0.8, 1, 0.8, 0.6)
)
B <- data.frame(
measures = c(1:10),
pertinence = c(0, 0, 0, 0, 0.4, 0.5, 0.6, 1, 0.6, 0.4)
)
C <- data.frame(
measures = c(1:10),
pertinence = c(0, 1, 0.2, 0.3, 0.4, 0.5, 0.6, 1, 0.5, 0)
)
B
C
ggplot(A, aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0)) + geom_line(size = 1.3, color = "red") + geom_point(size = 3, color = "red")
ggplot(A, aes(x = measures, y = pertinence)) + geom_segment(aes(xend = measures, yend = 0), size = 1.3, linetype = "dashed") + geom_line(size = 1.3, color = "red") + geom_point(size = 3, color = "red")
sum(A$pertinence)
sum(B$pertinence)
sum(C$pertinence)
library(dplyr)
library(ggplot2)
library(tidyr)
library(purrr)
resultado_run6 <- read.csv("C:/Users/otavi/Downloads/resultado_run6.csv")
View(resultado_run6)
res_min <- resultado_run6 %>% group_by(version) %>% group_by(proc) %>% mutate(time = min(time))
View(res_min)
res_min <- resultado_run6 %>% group_by(version) %>% group_by(proc) %>% mutate(run = NULL) %>% mutate(time = min(time))
res_min <- resultado_run6 %>% group_by(version) %>% group_by(proc) %>% mutate(run = NULL) %>% mutate(time = min(time)) %>% unique(time)
res_min <- resultado_run6 %>% group_by(version) %>% group_by(proc) %>% mutate(run = NULL) %>% mutate(time = min(time)) %>% unique()
ggplot(res_min, aes(x = proc, y = time)) %>% geom_line() + geom_smooth(method = "loess") + facet_wrap(version)
ggplot(res_min, aes(x = proc, y = time)) %>% geom_line() + geom_smooth(method = "loess") + facet_wrap(~version)
ggplot(res_min, aes(x = proc, y = time)) + geom_line() + geom_smooth(method = "loess") + facet_wrap(~version)
ggplot(res_min, aes(x = proc, y = time)) + geom_smooth(method = "loess") + geom_point() + facet_wrap(~version)
ggplot(res_min, aes(x = proc, y = time)) + geom_line() + geom_smooth(size = 1.3, method = "loess") + facet_wrap(~version)
ggplot(res_min, aes(x = proc, y = time)) + geom_smooth(size = 1.3, method = "loess") + geom_point() + facet_wrap(~version)
A <- data.frame(
measures = c(1:10),
pertinence = c(0,0,0,0,0.4,0.6,0.8,1.0,0.8,0.6)
)
A
library(dplyr)
library(plotly)
plot_ly(z=~volcano)
library(dplyr)
library(plotly)
plot_ly(z=~volcano)%>%add_surface()
install.packages(c('tensorflow', 'keras'))
install.packages('tensorflow', 'keras')
getwd()
setwd("C:/Users/otavi/OneDrive/Dokumente/UFBA/Mestrado/MATE33"")
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/GPU/cu92"
options(repos = cran)
install.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/GPU/cu10"
options(repos = cran)
install.packages("mxnet")
install.packages(c('dplyr', 'tidyr', 'ggplot2', 'plotly', 'matlib', 'readr', 'stringr'))
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/GPU/cu92"
options(repos = cran)
install.packages("mxnet")
setwd('C:/Users/otavi/Workspace/AI/fast_ai_lessons/lesson_1/R_implementation')
rm(cran)
help(mx.symbol.Flatten)
library(mxnet)
help("mx.symbol.flatten")
help("mx.symbol.Flatten")
library(mxnet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(readr)
# Loaging labels
labels <- read_table2("../../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
# Preparing the labels dictionary
labels_dict <- labels %>%
mutate(image_file = str_replace(image_file, "_([0-9]{1,})", "")) %>%
mutate(image_file = str_replace_all(image_file, "_", " ")) %>%
mutate(species = if_else(species == 1, "cat", "dog")) %>%
mutate(breed_id = NULL) %>%
unique(.)
names(labels_dict) <- c("breed", "class", "species")
labels <- labels %>%
mutate(index = row.names(labels)) %>%
mutate(image_file = str_c(image_file, ".jpg", sep = ""))
labels <- labels[c("index", "class_id", "image_file")]
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
write_delim(input_list$train, "train_list", delim = " \t ", col_names = F)
write_delim(input_list$val, "val_list", delim = " \t ", col_names = F)
write_delim(input_list$test, "test_list", delim = " \t ", col_names = F)
View(input_list$train)
source("cnn_symbol_v2.R")
install.packages('mlbench')
source("cnn_symbol_v2.R")
symbol <- get_symbol(nrow(labels_dict))
source("cnn_symbol_v2.R")
symbol <- get_symbol(nrow(labels_dict))
source("cnn_symbol_v2.R")
symbol <- get_symbol(nrow(labels_dict))
train_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/train.bin"
val_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/val.bin"
test_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/val.bin"
im2rec(image_lst = "train_list",
root = "../../datasets/image_classification/oxford-iiit-pet/images/",
output_rec = train_bin,
new_size = 256)
