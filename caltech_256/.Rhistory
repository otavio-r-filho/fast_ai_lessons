train <- mx.io.ImageRecordIter(path.imglist = train_bin,
batch.size = 32,
data.shape = c(256, 256, 3),
scale = 1/255)
train <- mx.io.ImageRecordIter(path.imgrec = train_bin,
batch.size = 32,
data.shape = c(256, 256, 3),
scale = 1/255)
val <- mx.io.ImageRecordIter(path.imgrec = val_bin,
batch.size = 32,
data.shape = c(256, 256, 3),
scale = 1/255)
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
array.batch.size = 32,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
help("im2rec")
library(mxnet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(readr)
# Loaging labels
labels <- read_table2("../../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
# Preparing the labels dictionary
labels_dict <- labels %>%
mutate(image_file = str_replace(image_file, "_([0-9]{1,})", "")) %>%
mutate(image_file = str_replace_all(image_file, "_", " ")) %>%
mutate(species = if_else(species == 1, "cat", "dog")) %>%
mutate(breed_id = NULL) %>%
unique(.)
names(labels_dict) <- c("breed", "class", "species")
#View(labels_dict)
labels <- labels %>%
mutate(index = row.names(labels)) %>%
mutate(image_file = str_c(image_file, ".jpg", sep = ""))
labels <- labels[c("index", "class_id", "image_file")]
#View(labels)
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
img_root_dir <- "../../datasets/image_classification/oxford-iiit-pet/images/"
train_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/train.bin"
val_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/val.bin"
test_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/val.bin"
train_lst <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/train.lst"
val_lst <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/val.lst"
test_lst <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/test.lst"
#input_list$train$image_file <- apply_prefix(input_list$train$image_file, img_root_dir)
#input_list$val$image_file <- apply_prefix(input_list$val$image_file, img_root_dir)
#input_list$test$image_file <- apply_prefix(input_list$test$image_file, img_root_dir)
write_delim(input_list$train, train_lst, delim = '\t', col_names = F)
write_delim(input_list$val, val_lst, delim = '\t', col_names = F)
write_delim(input_list$test, test_lst, delim = '\t', col_names = F)
#View(input_list$train)
source("cnn_symbol_v2.R")
symbol <- get_symbol(nrow(labels_dict))
im2rec(image_lst = train_lst,
root = img_root_dir,
output_rec = train_bin,
new_size = 256)
im2rec(image_lst = val_lst,
root = img_root_dir,
output_rec = val_bin,
new_size = 256)
im2rec(image_lst = test_lst,
root = img_root_dir,
output_rec = test_bin,
new_size = 256)
train <- mx.io.ImageRecordIter(path.imgrec = train_bin,
batch.size = 32,
data.shape = c(256, 256, 3),
scale = 1/255)
val <- mx.io.ImageRecordIter(path.imgrec = val_bin,
batch.size = 32,
data.shape = c(256, 256, 3),
scale = 1/255)
library(mxnet)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(readr)
# Loaging labels
labels <- read_table2("../../datasets/image_classification/oxford-iiit-pet/annotations/list.txt",
col_names = FALSE, comment = "#")
labels <- labels[,1:3]
names(labels) <- c("image_file", "class_id", "species")
# Preparing the labels dictionary
labels_dict <- labels %>%
mutate(image_file = str_replace(image_file, "_([0-9]{1,})", "")) %>%
mutate(image_file = str_replace_all(image_file, "_", " ")) %>%
mutate(species = if_else(species == 1, "cat", "dog")) %>%
mutate(breed_id = NULL) %>%
unique(.)
names(labels_dict) <- c("breed", "class", "species")
#View(labels_dict)
labels <- labels %>%
mutate(index = row.names(labels)) %>%
mutate(image_file = str_c(image_file, ".jpg", sep = ""))
labels <- labels[c("index", "class_id", "image_file")]
#View(labels)
source("aux_functions.R")
input_list <- split_dataset(labels, 0.7, 0.15)
img_root_dir <- "../../datasets/image_classification/oxford-iiit-pet/images/"
train_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/train.bin"
val_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/val.bin"
test_bin <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/val.bin"
train_lst <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/train.lst"
val_lst <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/val.lst"
test_lst <- "../../datasets/image_classification/oxford-iiit-pet/processed_files/test.lst"
#input_list$train$image_file <- apply_prefix(input_list$train$image_file, img_root_dir)
#input_list$val$image_file <- apply_prefix(input_list$val$image_file, img_root_dir)
#input_list$test$image_file <- apply_prefix(input_list$test$image_file, img_root_dir)
write_delim(input_list$train, train_lst, delim = '\t', col_names = F)
write_delim(input_list$val, val_lst, delim = '\t', col_names = F)
write_delim(input_list$test, test_lst, delim = '\t', col_names = F)
#View(input_list$train)
source("cnn_symbol_v2.R")
symbol <- get_symbol(nrow(labels_dict))
im2rec(image_lst = train_lst,
root = img_root_dir,
output_rec = train_bin,
new_size = 256)
im2rec(image_lst = val_lst,
root = img_root_dir,
output_rec = val_bin,
new_size = 256)
im2rec(image_lst = test_lst,
root = img_root_dir,
output_rec = test_bin,
new_size = 256)
train <- mx.io.ImageRecordIter(path.imgrec = train_bin,
batch.size = 32,
data.shape = c(256, 256, 3),
scale = 1/255)
val <- mx.io.ImageRecordIter(path.imgrec = val_bin,
batch.size = 32,
data.shape = c(256, 256, 3),
scale = 1/255)
model <- mx.model.FeedForward.create(
X = train,
eval.data = val,
ctx = mx.gpu(),
symbol = symbol,
eval.metric = mx.metric.top_k_accuracy,
array.batch.size = 32,
num.round = 50,
batch.end.callback = mx.callback.log.train.metric(10),
epoch.end.callback = mx.callback.save.checkpoint("dg_classifier", period = 10),
verbose = T,
initializer = mx.init.Xavier()
)
View(input_list$train)
train_img_paths <- apply_prefix(input_list$train$image_file, img_root_dir)
val_img_paths <- apply_prefix(input_list$val$image_file, img_root_dir)
test_img_paths <- apply_prefix(input_list$test$image_file, img_root_dir)
View(train_img_paths)
library(imager)
img <- load.image(train_img_paths[1])
plot(img)
rm(img)
install.packages("EBImage")
readImage
img <- load.image(train_img_paths[1])
as.array(img)
img <- as.array(img)
train_img_paths[1]
dim(img)
setwd('/home/otavio/Workspace/AI/fast_ai_lessons/mnist')
require(dplyr)
train_dataset_file <- "../datasets/image_classification/kaggle_mnist/train.csv"
test_dataset_file <- "../datasets/image_classification/kaggle_mnist/test.csv"
require(readr)
ds_train <- read_csv(train_dataset_file)
View(ds_train)
train_y <- train_x[,2:ncol(train_x)]
rm(ds_train)
train_x <- read_csv(train_dataset_file)
train_y <- train_x[,2:ncol(train_x)]
View(train_y)
train_y <- train_x[,1]
train_x <- train_x[,2:ncol(train_x)]
View(train_y)
# Splitting the dataset
val_split <- round(0.3 * nrow(train_x), digits = 0)
exp <- seq(1,10)
exp
exp[1:5]
require(dplyr)
require(readr)
train_dataset_file <- "../datasets/image_classification/kaggle_mnist/train.csv"
test_dataset_file <- "../datasets/image_classification/kaggle_mnist/test.csv"
train_x <- read_csv(train_dataset_file)
# Splitting the dataset
val_split <- round(0.3 * nrow(train_x), digits = 0)
val_x <- train_x[1:val_split,2:ncol(train_x)]
val_y <- train_x[1:val_split,1]
42000 - 12600
train_y <- train_x[val_split+1:nrow(train_x),1]
train_y <- train_x[val_split+1:nrow(train_x),1]
train_y <- train_x[(val_split+1):nrow(train_x),1]
train_x <- train_x[(val_split+1):nrow(train_x),2:ncol(train_x)]
source("mlp_symbol.R")
train_x[1,1]
train_x[1,50]
train_x[50,50]
max(val_x)
require(dplyr)
require(readr)
train_dataset_file <- "../datasets/image_classification/kaggle_mnist/train.csv"
test_dataset_file <- "../datasets/image_classification/kaggle_mnist/test.csv"
# Loading the dataset
train_x <- read_csv(train_dataset_file)
train_x <- train_x / 255
# Setting the split ratio
val_split <- round(0.3 * nrow(train_x), digits = 0)
# Splitting the dataset
val_x <- train_x[1:val_split,-1]
val_y <- train_x[1:val_split,1]
train_y <- train_x[(val_split+1):nrow(train_x),1]
train_x <- train_x[(val_split+1):nrow(train_x),-1]
require(dplyr)
require(readr)
train_dataset_file <- "../datasets/image_classification/kaggle_mnist/train.csv"
test_dataset_file <- "../datasets/image_classification/kaggle_mnist/test.csv"
# Loading the dataset
train <- data.matrix(read_csv(train_dataset_file))
# Setting the split ratio
val_split <- round(0.3 * nrow(train_x), digits = 0)
# Splitting the dataset
val_x <- train[1:val_split,-1]
val_y <- train[1:val_split,1]
train_y <- train[-(1:val_split),1]
train_x <- train[-(1:val_split),-1]
require(dplyr)
require(readr)
train_dataset_file <- "../datasets/image_classification/kaggle_mnist/train.csv"
test_dataset_file <- "../datasets/image_classification/kaggle_mnist/test.csv"
# Loading the dataset
train <- read_csv(train_dataset_file)
train <- data.matrix(train)
# Setting the split ratio
val_split <- round(0.3 * nrow(train), digits = 0)
# Splitting the dataset
val_x <- train[1:val_split,-1]
val_y <- train[1:val_split,1]
train_y <- train[-(1:val_split),1]
train_x <- train[-(1:val_split),-1]
dim(train_x)
require(dplyr)
require(readr)
train_dataset_file <- "../datasets/image_classification/kaggle_mnist/train.csv"
test_dataset_file <- "../datasets/image_classification/kaggle_mnist/test.csv"
# Loading the dataset
train <- read_csv(train_dataset_file)
train <- data.matrix(train)
# Setting the split ratio
val_split <- round(0.3 * nrow(train), digits = 0)
# Splitting the dataset
val_x <- train[1:val_split,-1] / 255
val_y <- train[1:val_split,1]
train_x <- train[-(1:val_split),-1] / 255
train_y <- train[-(1:val_split),1]
min(train_x)
max(train_x)
dim(train_x)
dim(val_x)
source("mlp_symbol.R")
nn_model <- get_symbol(10)
graph.viz(nn_model$as.json())
graph.viz(nn_model)
help(mx.gpu)
model <- mx.model.FeedForward.create(
symbol = nn_model,
X = train_x,
y = train_y,
ctx = mx.gpu,
)
model <- mx.model.FeedForward.create(
symbol = nn_model,
X = train_x,
y = train_y,
ctx = mx.gpu,
)
model <- mx.model.FeedForward.create(
symbol = nn_model,
X = train_x,
y = train_y,
ctx = mx.gpu,
eval.data = list(data = val_x, label = val_y),
eval.metric = mx.metric.top_k_accuracy,
array.batch.size = 96,
num.round = 50,
epoch.end.callback = mx.callback.log.train.metric(50),
batch.end.callback = mx.callback.log.speedometer(96)
)
model <- mx.model.FeedForward.create(
symbol = nn_model,
X = train_x,
y = train_y,
ctx = mx.gpu(),
eval.data = list(data = val_x, label = val_y),
eval.metric = mx.metric.top_k_accuracy,
array.batch.size = 96,
num.round = 50,
epoch.end.callback = mx.callback.log.train.metric(50),
batch.end.callback = mx.callback.log.speedometer(96)
)
model <- mx.model.FeedForward.create(
symbol = nn_model,
X = train_x,
y = train_y,
ctx = mx.gpu(),
eval.data = list(data = val_x, label = val_y),
learnin.reate = 0.01
eval.metric = mx.metric.top_k_accuracy,
array.batch.size = 96,
num.round = 50,
epoch.end.callback = mx.callback.log.train.metric(50),
batch.end.callback = mx.callback.log.speedometer(96)
)
model <- mx.model.FeedForward.create(
symbol = nn_model,
X = train_x,
y = train_y,
ctx = mx.gpu(),
eval.data = list(data = val_x, label = val_y),
learnin.reate = 0.01,
eval.metric = mx.metric.top_k_accuracy,
array.batch.size = 96,
num.round = 50,
epoch.end.callback = mx.callback.log.train.metric(50),
batch.end.callback = mx.callback.log.speedometer(96)
)
model <- mx.model.FeedForward.create(
symbol = nn_model,
X = train_x,
y = train_y,
ctx = mx.gpu(),
eval.data = list(data = val_x, label = val_y),
learnin.rate = 0.01,
eval.metric = mx.metric.top_k_accuracy,
array.batch.size = 96,
num.round = 50,
epoch.end.callback = mx.callback.log.train.metric(50),
batch.end.callback = mx.callback.log.speedometer(96)
)
model <- mx.model.FeedForward.create(
symbol = nn_model,
X = train_x,
y = train_y,
ctx = mx.gpu(),
eval.data = list(data = val_x, label = val_y),
learning.rate = 0.01,
eval.metric = mx.metric.top_k_accuracy,
array.layout = "rowmajor",
array.batch.size = 96,
num.round = 50,
epoch.end.callback = mx.callback.log.train.metric(50),
batch.end.callback = mx.callback.log.speedometer(96)
)
setwd('/home/otavio/Workspace/AI/fast_ai_lessons/caltech_256')
library(dplyr)
library(readr)
library(dplyr)
library(readr)
library(mlbench)
library(mxnet)
train.rec <- "../datasets/image_classification/caltech_256/processed_files/caltech256-train.rec"
val.rec <- "../datasets/image_classification/caltech_256/processed_files/caltech256-val.rec"
train_iter <- mx.io.ImageRecordIter(
path.imgrec = train.rec,
data.shape = c(3,299,299),
batch.size = 48,
resize = 299
)
val_iter <- mx.io.ImageRecordIter(
path.imgrec = val.rec,
data.shape = c(3,299,299),
batch.size = 48,
resize = 299
)
source("symbol_vgg.R")
nn_vgg <- get_symbol(num_classes = 256)
model <- mx.model.FeedForward.create(
symbol = nn_vgg,
X = train_iter,
eval.data = val_iter,
ctx = mx.gpu(),
num.round = 50,
initializer = mx.init.Xavier(),
optimizer = "adam",
learning.rate = 0.001,
momentum = 0.98,
eval.metric = mx.metric.logloss,
epoch.end.callback = mx.callback.save.checkpoint("symbol_vgg"),
batch.end.callback = mx.callback.log.speedometer(48)
)
train_iter <- mx.io.ImageRecordIter(
path.imgrec = train.rec,
data.shape = c(299,299,3),
batch.size = 48,
resize = 299
)
val_iter <- mx.io.ImageRecordIter(
path.imgrec = val.rec,
data.shape = c(299,299,3),
batch.size = 48,
resize = 299
)
source("symbol_vgg.R")
nn_vgg <- get_symbol(num_classes = 256)
model <- mx.model.FeedForward.create(
symbol = nn_vgg,
X = train_iter,
eval.data = val_iter,
ctx = mx.gpu(),
num.round = 50,
initializer = mx.init.Xavier(),
optimizer = "adam",
learning.rate = 0.001,
momentum = 0.98,
eval.metric = mx.metric.logloss,
epoch.end.callback = mx.callback.save.checkpoint("symbol_vgg"),
batch.end.callback = mx.callback.log.speedometer(48)
)
model <- mx.model.FeedForward.create(
symbol = nn_vgg,
X = train_iter,
eval.data = val_iter,
ctx = mx.gpu(),
num.round = 50,
initializer = mx.init.Xavier(),
optimizer = "adam",
learning.rate = 0.001,
eval.metric = mx.metric.logloss,
epoch.end.callback = mx.callback.save.checkpoint("symbol_vgg"),
batch.end.callback = mx.callback.log.speedometer(48)
)
model <- mx.model.FeedForward.create(
symbol = nn_vgg,
X = train_iter,
eval.data = val_iter,
ctx = mx.gpu(),
num.round = 50,
initializer = mx.init.Xavier(),
optimizer = "adam",
learning.rate = 0.001,
eval.metric = mx.metric.logloss,
epoch.end.callback = mx.callback.save.checkpoint("symbol_vgg")
)
train.rec <- "../datasets/image_classification/caltech_256/processed_files/caltech256-train.rec"
train.lst <- "../datasets/image_classification/caltech_256/processed_files/caltech256-train.lst"
train.idx <- "../datasets/image_classification/caltech_256/processed_files/caltech256-train.idx"
val.rec <- "../datasets/image_classification/caltech_256/processed_files/caltech256-val.rec"
val.lst <- "../datasets/image_classification/caltech_256/processed_files/caltech256-val.lst"
val.idx <- "../datasets/image_classification/caltech_256/processed_files/caltech256-val.idx"
train_iter <- mx.io.ImageRecordIter(
path.imglist = train.lst,
path.imgrec = train.rec,
path.imgidx = train.idx,
data.shape = c(299,299,3),
batch.size = 48,
resize = 299
)
val_iter <- mx.io.ImageRecordIter(
path.imglist = val.lst,
path.imgrec = val.rec,
path.imgidx = val.idx,
data.shape = c(299,299,3),
batch.size = 48,
resize = 299
)
source("symbol_vgg.R")
nn_vgg <- get_symbol(num_classes = 256)
model <- mx.model.FeedForward.create(
symbol = nn_vgg,
X = train_iter,
eval.data = val_iter,
ctx = mx.gpu(),
num.round = 50,
initializer = mx.init.Xavier(),
optimizer = "adam",
learning.rate = 0.001,
eval.metric = mx.metric.logloss,
epoch.end.callback = mx.callback.save.checkpoint("symbol_vgg")
)
model <- mx.model.FeedForward.create(
symbol = nn_vgg,
X = train_iter,
eval.data = val_iter,
ctx = mx.cpu(),
num.round = 50,
initializer = mx.init.Xavier(),
optimizer = "adam",
learning.rate = 0.001,
eval.metric = mx.metric.logloss,
epoch.end.callback = mx.callback.save.checkpoint("symbol_vgg")
)
